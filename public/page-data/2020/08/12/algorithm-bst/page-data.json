{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/08/12/algorithm-bst/","result":{"data":{"content":{"edges":[{"node":{"id":"3fc12bfd-4d30-5d81-941b-ab1811e4c015","html":"<h3 id=\"tree\" style=\"position:relative;\"><a href=\"#tree\" aria-label=\"tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tree</h3>\n<p>树是节点的集合，从根节点开始，每个节点都是由一个值和一个节点的list引用\n组成，没有重复的引用，没有指向根节点的引用。</p>\n<blockquote>\n<p>节点之间只有父子的关系；且没有循环</p>\n</blockquote>\n<h3 id=\"tree-size，height\" style=\"position:relative;\"><a href=\"#tree-size%EF%BC%8Cheight\" aria-label=\"tree size，height permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tree size，height</h3>\n<p>size指的是树包含节点的数量；height指的是最长路径。也就是边的个数，\n从根节点到叶子节点；</p>\n<h3 id=\"binary-tree二叉树\" style=\"position:relative;\"><a href=\"#binary-tree%E4%BA%8C%E5%8F%89%E6%A0%91\" aria-label=\"binary tree二叉树 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binary Tree二叉树</h3>\n<p>最多有两个孩子的树</p>\n<h3 id=\"binary-tree类型\" style=\"position:relative;\"><a href=\"#binary-tree%E7%B1%BB%E5%9E%8B\" aria-label=\"binary tree类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>binary tree类型</h3>\n<ol>\n<li>满二叉树，每个节点要么是两个孩子节点要么没有孩子节点；</li>\n<li>完整二叉树，从左到右每个节点都有两个节点，最右边可能是一个节点</li>\n<li>完美二叉树，是内部节点都有两个孩子，叶子的深度也都一样</li>\n<li>平衡二叉树，所有节点的左子树和右子树的高度不超过1；</li>\n<li>病态二叉树，每个节点最多有一个孩子，和linkedlist相似</li>\n</ol>\n<h3 id=\"binary-search--tree-二叉搜索树\" style=\"position:relative;\"><a href=\"#binary-search--tree-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91\" aria-label=\"binary search  tree 二叉搜索树 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>binary search  tree 二叉搜索树</h3>\n<p>BST是二叉树，它的节点满足一下规则：</p>\n<ul>\n<li>节点右子树的所有值必须大于节点的值</li>\n<li>节点的左子树的所有值必须小于节点值</li>\n</ul>\n<h3 id=\"bst应用场景\" style=\"position:relative;\"><a href=\"#bst%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\" aria-label=\"bst应用场景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BST应用场景</h3>\n<p>多用在维护以某种排序动态改变的数据集。</p>\n<h3 id=\"基本操作\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\" aria-label=\"基本操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本操作</h3>\n<p>BST是一种排序树，可以使用二叉搜索的方式搜索树，来执行\n更快的查找</p>\n<ol>\n<li>查找 O(logn)\n小于当前值查找左侧，大于当前值查找右侧</li>\n<li>\n<p>自动平衡\nBST的查找性能依赖于树的形状。平衡二叉树的查找使用O(logn);\n而病态的二叉树查找则是O(n);</p>\n<blockquote>\n<p>在增加和删除节点的时候，同时维护二叉搜索树的平衡，有助于维护查找操作的高性能。 一些结构是基于二叉搜索树的，但是带有额外的平衡树的特性，比如avl tree和Red black tree</p>\n</blockquote>\n</li>\n<li>插入\n大于当前值，找到右侧为空的节点，插入；小于当前值，\n找到左侧为空的节点，插入；</li>\n<li>移除</li>\n<li>移除叶子节点</li>\n<li>移除带有一个孩子节点的节点\n需要使得当前孩子节点成为当前节点的父节点的孩子节点</li>\n<li>移除带有两个孩子节点的节点\n找到接下来最大的值(右侧分支的最小值)，来替换掉当前节点</li>\n<li>遍历</li>\n<li>依次遍历， 从左侧孩子节点到右侧孩子节点</li>\n<li>先序遍历， 根左右</li>\n<li>后序遍历，左右根</li>\n</ol>","excerpt":"tree 树是节点的集合，从根节点开始，每个节点都是由一个值和一个节点的list引用\n组成，没有重复的引用，没有指向根节点的引用。 节点之间只有父子的关系；且没有循环 tree size，height size指的是树包含节点的数量；height…","fields":{"slug":"/2020/08/12/algorithm-bst/"},"frontmatter":{"id":"binary-search-tree","title":"binary search tree","slug":"/2020/08/12/algorithm-bst/","date":"2020-08-12T03:48:03.125Z","headerImage":"https://i.imgur.com/Ivxkc3R.jpg"}},"previous":null,"next":null}]}},"pageContext":{"id":"3fc12bfd-4d30-5d81-941b-ab1811e4c015","index":5}},"staticQueryHashes":["3705334695"]}