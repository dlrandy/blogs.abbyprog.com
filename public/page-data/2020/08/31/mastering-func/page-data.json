{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/08/31/mastering-func/","result":{"data":{"content":{"edges":[{"node":{"id":"70e5601d-df41-544f-8620-d2354b8e06bb","html":"<p>typescript里函数的类型，可以从函数值来推导出来；\n所以函数变量不需要添加冗余的类型声明。</p>\n<p>typescript的函数，可以根据return推导出函数的返回类型</p>\n<p>在类里箭头函数改变了this工作的方式</p>\n<p>trailing commas是js和ts 的最佳实践</p>\n<p>可选参数必须放在必填函数的后面；\n可选参数使用的时候，需要校验；所以有了\n默认参数。</p>\n<p>因为undefined有可能被用来作为变量名，\n所以判断undefined的时候使用void 0；</p>\n<p>arguments暴露了标准数组对象的一些方法，但不是\n所有。</p>\n<p>函数或者方法，重载是使用同样的名字和不同数量的参数或者不同的类型创建多个函数的能力。\n在typescript里，重载函数需要先指定所有的函数签名，最后跟上实现的签名；\n所有的函数签名应该兼容(指的是返回值类型)。</p>\n<blockquote>\n<p>使用特殊的签名可以创建带有同名和同样数量的参数的函数，但是可以由不同类型的返回值。为了创建特殊的签名，\n必须使用一个字符串来指定函数参数的类型。字符串字面量用来识别哪个重载函数在被调用</p>\n</blockquote>\n<p>签名的实现必须兼容所有的重载签名，总是在列表的最后，接收any或者联合类型作为它的参数类型</p>\n<p>写重载声明的时候，非特殊签名的声明放在最后</p>\n<p>理解typescript的scope运行的原理，有助于理解变量的生命周期</p>\n<p>lexical scoping\n是编程语言使用程序源码的结构来决定哪些变量可以引用</p>\n<p>dynamic scoping\n使用的是程序栈的运行时state来决定哪些变量可以引用</p>\n<p>词法作用域相对较容易理解一些</p>\n<p>hoisting\n在运行时，函数执行之前，所有的变量声明都会被移动到函数的顶端</p>\n<p>let关键字运行将变量的作用设置到block内。</p>\n<p>一个immutable的变量，意味着它是不能被修改的</p>\n<p>立即执行函数是使用函数作用域创建词法作用域的一种模式。可以避免其他blocks的变量提升或者阻止污染全局作用域；也可以实现运行时的私有变量；</p>\n<p>闭包是引用独立变量的函数。也就是定义在闭包里的函数，可以记住被创建时的context(作用域里的所有变量)</p>\n<p>像是classes，module等组件被其他的组件使用的时候，很少担心实现运行时的私有属性。</p>\n<p>使用模板字符串创建的特殊函数叫做tag函数，它主要是用来\n修改标准模板字符串的行为的。\n好处就是可以创建自定义的模板字符串处理器。</p>\n<p>tag函数的参数，第一个是包含模板字符串里的静态字面量\n接下来的参数就是依次的变量值</p>\n<p>箭头函数式是函数表达式的简洁语法，词法上绑定了this的值，也就是可以在不修改this值的情况下\n添加函数</p>\n<p>待验证\n定义一个匿名函数，this会改变指向匿名函数</p>\n<p>回调地狱会导致维护问题：</p>\n<ol>\n<li>code难于理解\n2.难于维护（重构复用）\n3.异常处理更困难</li>\n</ol>\n<p>一旦Promise完成或者rejected，它的状态就不会在变了</p>\n<p>“he try…catch statement is not needed for a Promise function because, when an error is thrown within a promise, the promise will automatically be rejected.”</p>\n<p>Promise函数不需要try..catch，因为Promise内部发生错误的时候，Promise自动被rejected</p>\n<p>promise的异步控制流：\nConcurrent: 任务并行执行<br>\nRace: 任务并行执行，只返回最快的结果\nSeries: 一组任务顺序执行，但是上一个任务不会给下一个任务传递参数\nWaterfall: 一组任务顺序执行，上一个任务给下一个任务传递参数\nComposite: 上述控制流的各种组合</p>\n<p>typescript的新版本会引入一些新的特性来检测新的errors。</p>\n<p>generator代表是一个值序列。generator的接口是iterator</p>\n<p>异步的iterator每次调用next方法都会返回一个Promise</p>\n<p>可以使用yield*表达式将一个generator代理到另外一个generator；\n也可以用来将将迭代代理到iterables，比如数组。</p>\n<p>event loop和this\nJavaScript的运行时监督JavaScript代码的执行</p>\n<p>有一些的变量存在特定环境的运行时上面；</p>\n<p>js的运行时有很多种比如常见的各种浏览器，桌面，nodejs，jvm等。</p>\n<p>js有一个并发模型是基于event loop的，</p>\n<p>js 的runtime的一些概念：\nHeap，Stack，Queue，Frame\nFrame是stack的一个顺序工作单元；也就是一个函数块。\n就是说每一个函数执行的时候，都会有一个新的frame进入stack。</p>\n<p>stack是一个后进先出的对象的集合。</p>\n<p>queue包含着的是待处理的消息列表，只会在stack清空的时候，执行；\n这里的消息一般是用户或者application的事件。</p>\n<p>heap包含的是变量和正被使用的对象以及一些未被移除的frame</p>\n<p>因为js的单线程和event loop，js是没有真正的并发的</p>\n<p>event loop\n它遵循这运行到完的规则，但是yield可以解决这个问题</p>\n<p>web worker是以另一个线程后台运行，有自己的queue heap stack</p>\n<p>event loop的好处执行的顺序可预见；不好的是如果一个消息(event)\n占用了太长的时间，会导致程序无响应。所以最佳实践就是消息使用的\n时间要尽可能的短。</p>\n<p>nodejs的runtime是非阻塞IO的模型和单线程的事件循环模型的结合。\n也就是app在等待IO操作的时候，仍能够处理其他事件。</p>\n<p>JavaScript的this是由函数的调用方式决定的</p>\n<p>在global环境下，this指向global对象</p>\n<p>函数环境下的this\n取决于函数的调用方式，非严格模式下指向global否则是undefined</p>\n<p>原型继承模型里，对象继承对象。</p>\n<p>可以在运行时给实例对象添加属性和方法；而且这些属性和方法不用是class里声明的</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> p <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      d<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">__</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  d<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>访问对象原型的三种方法</p>\n<ol>\n<li>Person.prototype</li>\n<li>Object.getPrototypeOf(person)</li>\n<li>person.<strong>proto</strong></li>\n</ol>\n<p>闭包是函数引用自由独立变量的函数。自由独立的变量\n持久在创建时的词法作用域里</p>\n<p>静态变量可以被类的多个实例共享</p>\n<p><img src=\"/static/assets/js%E2%80%94%E2%80%94runtime@2x.png\" alt=\"frames\" title=\"frame\"></p>","excerpt":"typescript里函数的类型，可以从函数值来推导出来；\n所以函数变量不需要添加冗余的类型声明。 typescript的函数，可以根据return推导出函数的返回类型 在类里箭头函数改变了this工作的方式 trailing commas是js和ts…","fields":{"slug":"/2020/08/31/mastering-func/"},"frontmatter":{"id":"mastering func","title":"掌握函数基础","slug":"/2020/08/31/mastering-func/","date":"2020-08-31T03:48:03.125Z","headerImage":"https://i.imgur.com/Ivxkc3R.jpg"}},"previous":null,"next":null}]}},"pageContext":{"id":"70e5601d-df41-544f-8620-d2354b8e06bb","index":0}},"staticQueryHashes":["3705334695"]}