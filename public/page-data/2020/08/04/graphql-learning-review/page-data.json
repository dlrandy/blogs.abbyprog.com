{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/08/04/graphql-learning-review","result":{"data":{"content":{"edges":[{"node":{"id":"c9a935a8-5e9a-580e-aa07-40eb7d2a827d","html":"<p>Graphql是API的查询语言，又是执行query的服务端运行时。\n它定义数据的类型系统。通过定义类型的类型和fields来创建graphql服务。\n然后为每个类型的每个域提供函数。\n一旦service启动，它就可以接受graphql queries进行验证和执行。先验证确保只引用了\n定义的类型和fields，然后运行提供的函数产生结果。</p>\n<h3 id=\"为什么说graphql可以完全的替换多次api请求？\" style=\"position:relative;\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4graphql%E5%8F%AF%E4%BB%A5%E5%AE%8C%E5%85%A8%E7%9A%84%E6%9B%BF%E6%8D%A2%E5%A4%9A%E6%AC%A1api%E8%AF%B7%E6%B1%82%EF%BC%9F\" aria-label=\"为什么说graphql可以完全的替换多次api请求？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么说Graphql可以完全的替换多次API请求？</h3>\n<p>Graphal不仅可以通过参数对结果进行控制，每一个field和内置对象都可以有自己的参数。</p>\n<p>Graphql基本上是选择对象上的fields的</p>\n<p>Graphql service定义一组类型，完全的描述可在该service上查询的数据。</p>\n<p>graphql的对象类型，描述的是从service上获取的一类对象以及对象应该有哪些fields</p>\n<p>schema里的大多数类型是Object类型，有两种特殊类型 query和mutation。\ngraphql必须有query，定义的是每一个Graphql query的入口。</p>\n<p>Input类型和对象类型一样，只不过是INput开头</p>\n<p>类型系统的使用可以预先判断graphql的query是否有效，而不是依赖runtime检查。</p>\n<p>Graphql server执行Graphql query，将结果映射为query的结构返回。</p>\n<p>graphql的interface规定的是一个类型必须有同样的域</p>\n<p>graphql query的每一个field当作函数或者之前类型的方法-他返回下一个类型</p>\n<p>Graphql Server提供resolver函数来支持类型的域的。当一个域执行的时候，对应的resolver\n会被调用产生新的value。</p>\n<h3 id=\"how-graphql-works？\" style=\"position:relative;\"><a href=\"#how-graphql-works%EF%BC%9F\" aria-label=\"how graphql works？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>how Graphql works？</h3>\n<p>如果field产生的是scalar 值，那么执行就算结束了。如果field产生的是对象值， query\n将继续执行内部查询，直到找到scalar。</p>\n<p><img src=\"https://i.imgur.com/kqA9hFb.jpg\" alt=\"FYI\"></p>","excerpt":"Graphql是API的查询语言，又是执行query的服务端运行时。\n它定义数据的类型系统。通过定义类型的类型和fields来创建graphql服务。\n然后为每个类型的每个域提供函数。\n一旦service启动，它就可以接受graphql queries…","fields":{"slug":"/2020/08/04/graphql-learning-review"},"frontmatter":{"id":"graphql-intro","title":"graphqllearing review","slug":"/2020/08/04/graphql-learning-review","date":"2020-08-04T07:48:03.125Z","headerImage":"https://i.imgur.com/mich3dS.jpg"}},"previous":null,"next":null}]}},"pageContext":{"id":"c9a935a8-5e9a-580e-aa07-40eb7d2a827d","index":7}},"staticQueryHashes":["3705334695"]}