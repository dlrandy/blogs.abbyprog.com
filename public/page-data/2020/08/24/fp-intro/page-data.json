{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/08/24/fp-intro/","result":{"data":{"content":{"edges":[{"node":{"id":"e09890c3-6224-58ba-a3df-2978ddccf081","html":"<h3 id=\"fp的主要特点\" style=\"position:relative;\"><a href=\"#fp%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9\" aria-label=\"fp的主要特点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FP的主要特点</h3>\n<h3 id=\"fp的主要好处\" style=\"position:relative;\"><a href=\"#fp%E7%9A%84%E4%B8%BB%E8%A6%81%E5%A5%BD%E5%A4%84\" aria-label=\"fp的主要好处 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FP的主要好处</h3>\n<ul>\n<li>code易于测试</li>\n<li>code易于理解</li>\n<li>并发\n大多数函数无状态，code也无状态，最有可能支持并发操作和扩展</li>\n<li>缓存简单</li>\n</ul>\n<p>OOP编程的构建块是对象(class);\nFP则是函数；</p>\n<p>不同的范式有不同的思想和概念：\nOOP： 继承，封装，多态等；\nFP：高阶函数，函数的部分应用，柯理化，不可变性，引用透明等</p>\n<blockquote>\n<p>OOP是通过封装动态的部分使得code易于理解；FP则是最小化动态的部分使得code易于理解。</p>\n</blockquote>\n<p>动态的部分是指的什么？\n状态变化。</p>\n<blockquote>\n<p>OOP使用封装阻止对象意识到其他对象的状态变化；FP则是避免处理状态变化；</p>\n</blockquote>\n<h3 id=\"纯函数\" style=\"position:relative;\"><a href=\"#%E7%BA%AF%E5%87%BD%E6%95%B0\" aria-label=\"纯函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>纯函数</h3>\n<ul>\n<li>返回值只使用了参数来进行计算</li>\n<li>避免改变参数，避免改变或者依赖者其他外部变量</li>\n<li>\n<p>返回的值的类型最好也是确定的,或者说能够让接受者统一处理。</p>\n<blockquote>\n<p>module VS namespace</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"side-effects\" style=\"position:relative;\"><a href=\"#side-effects\" aria-label=\"side effects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>side-effects</h3>\n<p>函数的调用不会影响到函数外面其他的事物。</p>\n<p>typescript不能保证app 没有side effects.\nPromise有助于减少side effects的机会。</p>\n<h3 id=\"引用透明性\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E7%94%A8%E9%80%8F%E6%98%8E%E6%80%A7\" aria-label=\"引用透明性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引用透明性</h3>\n<p>当一个函数没有副作用的时候，叫做pure；一个表达式被对应的值替换掉；对应用没有影响\n纯函数是一个引用透明的表达式</p>\n<h3 id=\"stateless--vs-stateful\" style=\"position:relative;\"><a href=\"#stateless--vs-stateful\" aria-label=\"stateless  vs stateful permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stateless  VS stateful</h3>\n<p>stateless是函数的结果不受之前事件的影响；FP鼓励stateless；OOP鼓励有状态；</p>\n<h3 id=\"声明式-vs-过程式\" style=\"position:relative;\"><a href=\"#%E5%A3%B0%E6%98%8E%E5%BC%8F-vs-%E8%BF%87%E7%A8%8B%E5%BC%8F\" aria-label=\"声明式 vs 过程式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>声明式 VS 过程式</h3>\n<p>过程式： 使用一些改变程序state的声明；关注于描述一个程序\n怎么运行；\n声明式：在没有说明控制流的情况下，描述计算逻辑；</p>\n<h3 id=\"immutability\" style=\"position:relative;\"><a href=\"#immutability\" aria-label=\"immutability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Immutability</h3>\n<p>一个变量被赋值了，这个值就不能够改变了；</p>\n<h3 id=\"函数作为一级市民\" style=\"position:relative;\"><a href=\"#%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E4%B8%80%E7%BA%A7%E5%B8%82%E6%B0%91\" aria-label=\"函数作为一级市民 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数作为一级市民</h3>\n<p>是指可以做任何变量可以做的事情</p>\n<h3 id=\"函数arity\" style=\"position:relative;\"><a href=\"#%E5%87%BD%E6%95%B0arity\" aria-label=\"函数arity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数arity</h3>\n<p>只接受一个参数的函数</p>\n<h3 id=\"高阶函数\" style=\"position:relative;\"><a href=\"#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\" aria-label=\"高阶函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>高阶函数</h3>\n<p>至少是接收函数作为参数或者返回函数</p>\n<h3 id=\"laziness\" style=\"position:relative;\"><a href=\"#laziness\" aria-label=\"laziness permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Laziness</h3>\n<p>一个操作只在不能够推迟的情况下，才做</p>","excerpt":"FP的主要特点 FP的主要好处 code易于测试 code易于理解 并发\n大多数函数无状态，code也无状态，最有可能支持并发操作和扩展 缓存简单 OOP编程的构建块是对象(class);\nFP则是函数； 不同的范式有不同的思想和概念：\nOOP： 继承，封装，多态等；\nFP…","fields":{"slug":"/2020/08/24/fp-intro/"},"frontmatter":{"id":"fp-intro","title":"fp 入门","slug":"/2020/08/24/fp-intro/","date":"2020-08-24T03:48:03.125Z","headerImage":"https://i.imgur.com/Ivxkc3R.jpg"}},"previous":null,"next":null}]}},"pageContext":{"id":"e09890c3-6224-58ba-a3df-2978ddccf081","index":1}},"staticQueryHashes":["3705334695"]}