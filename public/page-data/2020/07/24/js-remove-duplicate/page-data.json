{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/07/24/js-remove-duplicate/","result":{"data":{"content":{"edges":[{"node":{"id":"6e6b292e-dc60-5098-82f4-1589b26c5cb3","html":"<p>对于基本类型值，使用set轻松搞定；也可以直接遍历到对象里，然后取key值。</p>\n<p>复杂类型</p>\n<h3 id=\"方法一\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\" aria-label=\"方法一 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法一</h3>\n<blockquote>\n<p>先有一个新的数组存储目标数据，然后定义一个判重的方法；在遍历原数组的时候，\n目标数组使用判重方法检测自己是否含有该项的数据，没有的话就加入到目标数组；\nbonus: 遍历数组，根据内容生成唯一key，存到set里，添加到目标数组，继续遍历...</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> containTheItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> targetArr<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">findCallback</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>first <span class=\"token operator\">===</span> member<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">.</span>last <span class=\"token operator\">===</span> member<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>findCallback<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> members <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    first<span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span>\n    last<span class=\"token operator\">:</span> <span class=\"token string\">'Bond'</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'10yejma'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    first<span class=\"token operator\">:</span> <span class=\"token string\">'Lars'</span><span class=\"token punctuation\">,</span>\n    last<span class=\"token operator\">:</span> <span class=\"token string\">'Croft'</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'1hhs0k2'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    first<span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span>\n    last<span class=\"token operator\">:</span> <span class=\"token string\">'Bond'</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'1y15hhu'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> m <span class=\"token keyword\">of</span> members<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">containTheItem</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    target<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"方法二\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\" aria-label=\"方法二 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法二</h3>\n<blockquote>\n<p>filter原素组，遍历的过程中根据forEach里再次查找相同数据内容的索引，如果两个索引一旦不同\n就是重复的；\nbonus: 过滤不存在set里的数据，每次过滤依据set是否含有这个值</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getIndexOfMember</span><span class=\"token punctuation\">(</span>memberArray<span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">indexCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>first <span class=\"token operator\">===</span> member<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">.</span>last <span class=\"token operator\">===</span> member<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> memberArray<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>indexCallback<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmembers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">it<span class=\"token punctuation\">,</span> inx<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getIndexOfMember</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"方法三\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%89\" aria-label=\"方法三 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法三</h3>\n<blockquote>\n<p>使用map，因为map的键值唯一，而且map又是一个二维数组。所以根据元素的内容生成唯一的key，元素作为value，\n然后取得map.values()</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> uniqueMemebers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>\n  members<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">.</span>first<span class=\"token operator\">+</span><span class=\"token string\">'\\t'</span><span class=\"token operator\">+</span>m<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [key, value]</span>\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>uniqueMemebers<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://2ality.com/2020/07/eliminating-duplicate-objects.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">参考链接</a>\n<img src=\"https://i.imgur.com/LalbenT.jpg\" alt=\"FYI\"></p>","excerpt":"对于基本类型值，使用set轻松搞定；也可以直接遍历到对象里，然后取key值。 复杂类型 方法一 先有一个新的数组存储目标数据，然后定义一个判重的方法；在遍历原数组的时候，\n目标数组使用判重方法检测自己是否含有该项的数据，没有的话就加入到目标数组；\nbonus…","fields":{"slug":"/2020/07/24/js-remove-duplicate/"},"frontmatter":{"id":"koa-review","title":"翻译 js对象去重","slug":"/2020/07/24/js-remove-duplicate/","date":"2020-07-24T03:48:03.125Z","headerImage":"https://i.imgur.com/IONCWVd.jpg"}},"previous":null,"next":null}]}},"pageContext":{"id":"6e6b292e-dc60-5098-82f4-1589b26c5cb3","index":10}},"staticQueryHashes":["3705334695"]}