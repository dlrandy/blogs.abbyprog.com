{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/07/13/algorithm-intro/","result":{"data":{"content":{"edges":[{"node":{"id":"567dc204-e32c-55f6-b100-c7adeff0615a","html":"<h3 id=\"什么是算法\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%97%E6%B3%95\" aria-label=\"什么是算法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是算法</h3>\n<p>是解决问题的一个方法或者一个过程，也就是若干条指令组成的有穷序列。</p>\n<h3 id=\"算法的性质\" style=\"position:relative;\"><a href=\"#%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%A7%E8%B4%A8\" aria-label=\"算法的性质 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>算法的性质</h3>\n<p>1.输入\n2.输出\n3.确定性\n4.有限性</p>\n<blockquote>\n<p>程序是算法的某种语言的具体实现</p>\n</blockquote>\n<h3 id=\"设计算法的原则\" style=\"position:relative;\"><a href=\"#%E8%AE%BE%E8%AE%A1%E7%AE%97%E6%B3%95%E7%9A%84%E5%8E%9F%E5%88%99\" aria-label=\"设计算法的原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>设计算法的原则</h3>\n<p>设计算法时的一个主要就是设计出算法复杂性低的算法，也就是时间和空间的复杂性都很低，越低占用的资源越少。\n算法的复杂度取决于问题的规模，算法的输入和算法本身的函数实现。</p>\n<h3 id=\"时间空间复杂性\" style=\"position:relative;\"><a href=\"#%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E6%80%A7\" aria-label=\"时间空间复杂性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>时间空间复杂性</h3>\n<p>衡量算法好坏的标准：\n在能够解决问题的情况下</p>\n<ol>\n<li>算法需要的时间的多少</li>\n<li>算法需要的内存的多少</li>\n</ol>\n<h3 id=\"big-o\" style=\"position:relative;\"><a href=\"#big-o\" aria-label=\"big o permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big O</h3>\n<p>它是标准的数学方式，用来描述算法的时间复杂性和空间复杂性。\n主要是根据输入规模的增长来描述算法的运行时间和需要的空间的增长程度。所以结果中非主要的常量可以直接拿掉。</p>\n<blockquote>\n<p>一种相对的概念，来展示算法执行时间的快慢或者依赖输入规模的内存使用的情况。相对的意思是时间和内存会因为不同的硬件，最终的结果值是不一样的。</p>\n</blockquote>\n<p>Big  O 定义的是input  size --> spent time的时间复杂性；input size --> consumed memory 的空间复杂性。</p>\n<blockquote>\n<p>描述复杂性的时候，必须要拿掉非主要的部分计算。e.g. O(n+1) => O(n)。Big O描述的是函数的秩，而不是准确的执行时间或者使用的内存数量。也就是描述趋势。时间复杂性可以看操作次数随着输入的变化的变化；空间复杂度可以看变量的数量随着输入变化的变化。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/n1zzzfV.png\" alt=\"trend\" title=\"func\"></p>\n<h4 id=\"o1\" style=\"position:relative;\"><a href=\"#o1\" aria-label=\"o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O(1)</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">thePower</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number<span class=\"token punctuation\">,</span> power</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> number <span class=\"token operator\">**</span> power<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n考虑函数的输入对操作次数的影响？\n\t任何的输入，函数都只做一次操作。所以时间复杂度为1；\n再考虑函数执行需要的内存\n\t操作变量的数量不依赖输入，所以空间复杂度为1\n*/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"on\" style=\"position:relative;\"><a href=\"#on\" aria-label=\"on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O(n)</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">otherPower</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number<span class=\"token punctuation\">,</span> power</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> power<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tresult <span class=\"token operator\">*=</span> number<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n考虑函数的输入对操作次数的影响？\n\t任何的输入，函数做一次操作result = 1, power次的result*= number,一次return result。所以时间复杂度为O(1) + O(power) + O(1) =>O(power) => O(n)；\n再考虑函数执行需要的内存\n\t操作变量的数量不依赖输入,只有一个result，所以空间复杂度为1\n*/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n考虑函数的输入对操作次数的影响？\n\t任何的输入，都要递归执行n次，e.g. f(4) = f(3) * 4; f(3) = f(2) * 3;f(2) = f(1)*2; f(1) = f(0)*1;f(0)=1;。所以时间复杂度为O(1) + O(n)  => O(n)；\n再考虑函数执行需要的内存\n\t从例子中可以看出需要存储f(3),f(2),f(1),f(0)，所以空间复杂度为O(n)\n*/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"o-n²-\" style=\"position:relative;\"><a href=\"#o-n%C2%B2-\" aria-label=\"o n²  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O( n² )</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>letters<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n考虑函数的输入对操作次数的影响？\n\t任何的输入，函数外层要循环n次，内层也要n次。所以时间复杂度为O(letters.length * letters.length) =>O(letters.length**2) => O(n**2)；\n再考虑函数执行需要的内存\n\t存储的数量为letters.length * letters.length，所以空间复杂度为O(n ** 2)\n*/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"空间复杂性-vs-辅助空间复杂性\" style=\"position:relative;\"><a href=\"#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E6%80%A7-vs-%E8%BE%85%E5%8A%A9%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E6%80%A7\" aria-label=\"空间复杂性 vs 辅助空间复杂性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>空间复杂性 VS 辅助空间复杂性</h3>\n<p>辅助空间不包含储存输入数据的内存。只存储解决问题时候需要的额外内存。\n空间复杂性包含辅助空间。</p>\n<blockquote>\n<p>空间复杂性 = 输入 + 辅助空间复杂性</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"> <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">multiplyArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> multiplier</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n \t<span class=\"token keyword\">const</span> multipliedArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> multipliedArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t\tmultipliedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> multiplier<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span> \n\t<span class=\"token keyword\">return</span> multipliedArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n考虑函数的输入对操作次数的影响？\n\t任何的输入，函数要循环n次。所以时间复杂度为O(array.length)  => O(n)；\n再考虑函数执行需要的内存\n\t输入需要的存储的数量为O(array.length)，辅助空间为O(array.length),所以空间复杂度为O(n * 2) => O(n)\n*/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","excerpt":"什么是算法 是解决问题的一个方法或者一个过程，也就是若干条指令组成的有穷序列。 算法的性质 1.输入\n2.输出\n3.确定性…","fields":{"slug":"/2020/07/13/algorithm-intro/"},"frontmatter":{"id":"algorithm-intro","title":"算法简介","slug":"/2020/07/13/algorithm-intro/","date":"2020-07-12T03:48:03.125Z","headerImage":"https://i.imgur.com/Ivxkc3R.jpg"}},"previous":null,"next":null}]}},"pageContext":{"id":"567dc204-e32c-55f6-b100-c7adeff0615a","index":14}},"staticQueryHashes":["3705334695"]}